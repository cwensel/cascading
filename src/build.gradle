/*
 * Copyright (c) 2007-2012 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: 'testing.gradle'

xmlProject = project('xml')
hadoopProject = project('hadoop')
localProject = project('local')
coreProject = project('core')
testProject = project('test')

subprojects { subproject ->
  apply plugin: 'java'
  apply plugin: 'maven'

  task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
 
  configure(subproject.jar) {
    manifest.attributes version: project.version
  }

  configure(subproject.artifacts) {
    archives jar
    archives sourcesJar
  }

  configure(install.repositories.mavenInstaller) {
    pom.artifactId = "cascading-${project.name}"
    pom.whenConfigured { pom ->
      pom.dependencies.findAll { dep ->
        dep.groupId == 'cascading'
      }.each { dep ->
        dep.artifactId = "cascading-${dep.artifactId}"
      }
    }
  }

  if( subproject.name != 'core' )
  {
    configure(subproject.dependencies) {
      compile coreProject
      runtime coreProject

      if( subproject.name == 'test' )
      {
        compile xmlProject, hadoopProject, localProject
        runtime xmlProject, hadoopProject, localProject
      }
    }
  }

  if( subproject.name != 'test' )
  {
    configure(subproject.dependencies) {
      testCompile testProject
      testRuntime testProject
    }
  }

  configure(subproject.test) {
    workingDir = rootDir
    forkEvery = 1
    jvmArgs '-Xmx756m'
  }
}

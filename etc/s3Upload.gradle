/*
 * Copyright (c) 2016-2017 Chris K Wensel <chris@wensel.net>. All Rights Reserved.
 * Copyright (c) 2007-2017 Xplenty, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.monochromeroad.gradle.plugin.aws.s3.ACL
import com.monochromeroad.gradle.plugin.aws.s3.S3Sync

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'com.monochromeroad.gradle-plugins:gradle-aws-s3-sync:0.10'
  }
}

// artifacts always publish in sub-project
task s3UploadArtifacts( type: S3Sync ) {

  accessKey = rootProject.awsAccessId
  secretKey = rootProject.awsSecretKey

  keepFiles = true // prevents deletion from bucket

  acl ACL.PublicRead

  configFile "${rootProject.projectDir}/etc/synchronizer.properties"

  ext.source = "${buildDir}/artifacts"

  if( project == rootProject )
    ext.destination = "${project.s3Bucket}/${rootProject.name}/${majorVersion}/"
  else
    ext.destination = "${project.s3Bucket}/${rootProject.name}/${majorVersion}/${project.name}/"

  doFirst {
    from source
    into destination
  }
}

// docs always publish in project root, do need a qualifier like 'javadoc' added
task s3UploadDocs( type: S3Sync ) {

  accessKey = rootProject.awsAccessId
  secretKey = rootProject.awsSecretKey

  keepFiles = true // prevents deletion from bucket

  acl ACL.PublicRead

  configFile "${rootProject.projectDir}/etc/synchronizer.properties"

  ext.source = "${buildDir}/documentation"

  ext.destination = "${project.s3BucketDocs}/${rootProject.name}/${majorVersion}/"

  doFirst {
    from source
    into destination
  }
}

task s3Upload( dependsOn: [s3UploadArtifacts, s3UploadDocs] ) {

}